import javax.swing.*;import java.awt.*;import java.awt.event.*;public class Canvas {    //Buttons    private JFrame f = new JFrame();    private JButton ButBack = new JButton("Назад");    private JButton ButCircles = new JButton("Окружности");    private JButton ButQuadrangles = new JButton("Четырехугольники");    private JButton ButCircle = new JButton("Окружность");    private JButton ButEllipse = new JButton("Эллипс");    private JButton ButQuadrangle = new JButton("Четырехугольник");    private JButton ButRectangle = new JButton("Прямоугольник");    private JButton ButRomb = new JButton("Ромб");    private JButton ButTrapeze = new JButton("Трапециия");    private JButton ButCreate = new JButton("Создать");    private JButton ButRemove = new JButton("Переместить");    private JButton ButDelete = new JButton("Удалить");    private JButton ButChangeRadius = new JButton("Изменить радиус");    private JButton ButTurn90 = new JButton("Повернуть на 90");    private JButton ButChangeSize = new JButton("Изменить размер");    private JButton ButArray = new JButton("Массив");    private JButton ButShow = new JButton("Показать");    private JButton ButClear = new JButton("Стереть");    private JButton ButTerminate = new JButton("Уничтожить");    private JButton ButSubclasses = new JButton("Подиерархии");    private JButton ButContainer = new JButton("Контейнер");    private JButton ButDynamicArray = new JButton("На базе динамического массива");    private JButton ButLinearList = new JButton("На базе линейного динамического списка");    private JButton ButAdd = new JButton("Добавить");    //Variables    private JPanel CP = centerPanel();    private JPanel SP = southPanel();    private TFigure circle = null;    private TCircle [] circles = null;    private TFigure ellipse = null;    private TFigure quadrangle = null;    private TRectangle [] rectangles = null;    private TFigure rectangle = null;    private TFigure romb = null;    private TFigure trapeze = null;    private TFigure[] array = null;    private JLabel text = null;    private ContainerArray ArrayContainer = null;    private ContainerList ListContainer = null;    private int ArrayCounter, ListCounter;        private int i, numbut, numbut2, ch1, ch2, ch3, ch4, ch5, ch6, ch7, ch8, indexList = 0;    private int fig_to_move;    private boolean VISION1 = true, VISION2 = true, VISION3 = true, VISION4 = true, VISION5 = true, VISION6 = true;    private Canvas() {        f.setLayout(new BorderLayout());        f.setSize(1280,680);        f.add(CP, BorderLayout.CENTER);        f.add(SP, BorderLayout.EAST);        //обработчик клавиш        f.addKeyListener(new KeyAdapter() {            public void keyPressed(KeyEvent e) {                switch (e.getKeyCode()) {                    case KeyEvent.VK_UP:                        if (fig_to_move == 0)                        {                            if (circle != null) (circle).MoveTo(0, -10);                            if (ellipse != null) ellipse.MoveTo(0, -10);                            if (quadrangle != null) quadrangle.MoveTo(0, -10);                            if (rectangle != null) rectangle.MoveTo(0, -10);                            if (romb != null) romb.MoveTo(0, -10);                            if (trapeze != null) trapeze.MoveTo(0, -10);                            if (array != null) MoveMassive(0,-10);                        }                        else if (fig_to_move == 1)                        {                            if (circle != null) (circle).MoveTo(0, -10);                            if (ellipse != null) ellipse.MoveTo(0, -10);                            if (array != null) MoveMassive(0,-10);                        }                        else if (fig_to_move == 2)                        {                            if (quadrangle != null) quadrangle.MoveTo(0, -10);                            if (rectangle != null) rectangle.MoveTo(0, -10);                            if (romb != null) romb.MoveTo(0, -10);                            if (trapeze != null) trapeze.MoveTo(0, -10);                            if (array != null) MoveMassive(0,-10);                        }                        CP.revalidate();                        CP.repaint();                        break;                    case KeyEvent.VK_DOWN:                        if (fig_to_move == 0)                        {                            if (circle != null) (circle).MoveTo(0, 10);                            if (ellipse != null) ellipse.MoveTo(0, 10);                            if (quadrangle != null) quadrangle.MoveTo(0, 10);                            if (rectangle != null) rectangle.MoveTo(0, 10);                            if (romb != null) romb.MoveTo(0, 10);                            if (trapeze != null) trapeze.MoveTo(0, 10);                            if (array != null) MoveMassive(0,10);                        }                        else if (fig_to_move == 1)                        {                            if (circle != null) (circle).MoveTo(0, 10);                            if (ellipse != null) ellipse.MoveTo(0, 10);                            if (array != null) MoveMassive(0,10);                        }                        else if (fig_to_move == 2)                        {                            if (quadrangle != null) quadrangle.MoveTo(0, 10);                            if (rectangle != null) rectangle.MoveTo(0, 10);                            if (romb != null) romb.MoveTo(0, 10);                            if (trapeze != null) trapeze.MoveTo(0, 10);                            if (array != null) MoveMassive(0,10);                        }                        CP.revalidate();                        CP.repaint();                        break;                    case KeyEvent.VK_LEFT:                        if (fig_to_move == 0)                        {                            if (circle != null) (circle).MoveTo(-10, 0);                            if (ellipse != null) ellipse.MoveTo(-10, 0);                            if (quadrangle != null) quadrangle.MoveTo(-10, 0);                            if (rectangle != null) rectangle.MoveTo(-10, 0);                            if (romb != null) romb.MoveTo(-10, 0);                            if (trapeze != null) trapeze.MoveTo(-10, 0);                            if (array != null) MoveMassive(-10,0);                            if (array != null) MoveMassive(-10,0);                        }                        else if (fig_to_move == 1)                        {                            if (circle != null) (circle).MoveTo(-10, 0);                            if (ellipse != null) ellipse.MoveTo(-10, 0);                            if (array != null) MoveMassive(-10,0);                        }                        else if (fig_to_move == 2)                        {                            if (quadrangle != null) quadrangle.MoveTo(-10, 0);                            if (rectangle != null) rectangle.MoveTo(-10, 0);                            if (romb != null) romb.MoveTo(-10, 0);                            if (trapeze != null) trapeze.MoveTo(-10, 0);                            if (array != null) MoveMassive(-10,0);                        }                        CP.revalidate();                        CP.repaint();                        break;                    case KeyEvent.VK_RIGHT:                        if (fig_to_move == 0)                        {                            if (circle != null) (circle).MoveTo(10, 0);                            if (ellipse != null) ellipse.MoveTo(10, 0);                            if (quadrangle != null) quadrangle.MoveTo(10, 0);                            if (rectangle != null) rectangle.MoveTo(10, 0);                            if (romb != null) romb.MoveTo(10, 0);                            if (trapeze != null) trapeze.MoveTo(10, 0);                            if (array != null) MoveMassive(10,0);                        }                        else if (fig_to_move == 1)                        {                            if (circle != null) (circle).MoveTo(10, 0);                            if (ellipse != null) ellipse.MoveTo(10, 0);                            if (array != null) MoveMassive(10,0);                        }                        else if (fig_to_move == 2)                        {                            if (quadrangle != null) quadrangle.MoveTo(10, 0);                            if (rectangle != null) rectangle.MoveTo(10, 0);                            if (romb != null) romb.MoveTo(10, 0);                            if (trapeze != null) trapeze.MoveTo(10, 0);                            if (array != null) MoveMassive(10,0);                        }                        CP.revalidate();                        CP.repaint();                        break;                }            }        });        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        f.setVisible(true);    }    //панель с рисунками    private JPanel centerPanel () {        JPanel p = new JPanel();        p.setLayout(new BorderLayout());        p.setBackground(Color.white);        return p;    }    //панель с кнопками    private JPanel southPanel () {        //Panel with buttons        JPanel p = new JPanel();        p.setLayout(new GridLayout(7, 1, 10, 10));        p.setBackground(Color.BLUE);        p.add(ButCircles);        p.add(ButQuadrangles);        p.add(ButArray);        p.add(ButContainer);        //кнопка "Окружности"        ButCircles.addActionListener(e -> {            if (numbut==7) {                numbut2 = 5;                fig_to_move = 1;                SP.removeAll();                SP.add(ButBack);                SP.add(ButRemove);                SP.add(ButChangeRadius);                JOptionPane.showMessageDialog(f,"Операции только с окружностями");            }            else {                SP.removeAll();                SP.add(ButBack);                SP.add(ButCircle);                SP.add(ButEllipse);                numbut2 = 1;            }            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Четырехугольники"        ButQuadrangles.addActionListener(e -> {            if (numbut==7) {                numbut2 = 5;                fig_to_move = 2;                SP.removeAll();                SP.add(ButBack);                SP.add(ButRemove);                SP.add(ButChangeSize);                JOptionPane.showMessageDialog(f,"Операции только с четырехугольниками");                f.setFocusable(true);                f.requestFocus();            }            else {                SP.removeAll();                SP.add(ButBack);                SP.add(ButQuadrangle);                SP.add(ButRectangle);                SP.add(ButRomb);                SP.add(ButTrapeze);                numbut2 = 1;            }            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Окружность"        ButCircle.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButRemove);            SP.add(ButDelete);            SP.add(ButChangeRadius);//            SP.add(ButArray);            numbut = 1;            numbut2 = 2;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Эллипс"        ButEllipse.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButRemove);            SP.add(ButDelete);            SP.add(ButTurn90);            numbut = 2;            numbut2 = 2;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Четырехугольник"        ButQuadrangle.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButRemove);            SP.add(ButDelete);            numbut = 3;            numbut2 = 3;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Прямоугольник"        ButRectangle.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButRemove);            SP.add(ButDelete);            SP.add(ButChangeSize);//            SP.add(ButArray);            numbut = 4;            numbut2 = 3;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Ромб"        ButRomb.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButRemove);            SP.add(ButDelete);            SP.add(ButChangeSize);            numbut = 5;            numbut2 = 3;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Трапециия"        ButTrapeze.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButRemove);            SP.add(ButDelete);            SP.add(ButChangeSize);            numbut = 6;            numbut2 = 3;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Назад"        ButBack.addActionListener(e -> {            SP.removeAll();            if (numbut2 == 1) {                SP.add(ButCircles);                SP.add(ButQuadrangles);                SP.add(ButArray);                SP.add(ButContainer);                numbut2=0;                numbut=0;            }            if (numbut2 == 2) {                SP.add(ButBack);                SP.add(ButCircle);                SP.add(ButEllipse);                numbut2 = 1;            }            if (numbut2 == 21) {                SP.add(ButBack);                SP.add(ButCreate);                SP.add(ButRemove);                SP.add(ButDelete);                SP.add(ButChangeRadius);//                SP.add(ButArray);                numbut = 1;                numbut2 = 2;            }            if (numbut2 == 3) {                SP.add(ButBack);                SP.add(ButQuadrangle);                SP.add(ButRectangle);                SP.add(ButRomb);                SP.add(ButTrapeze);                numbut2 = 1;            }            if (numbut2 == 4) {                SP.add(ButBack);                SP.add(ButCreate);                SP.add(ButShow);                SP.add(ButRemove);                SP.add(ButClear);                SP.add(ButTerminate);                SP.add(ButSubclasses);                numbut2 = 1;            }            if (numbut2 == 24) {                SP.add(ButBack);                SP.add(ButCreate);                SP.add(ButRemove);                SP.add(ButDelete);                SP.add(ButChangeSize);//                SP.add(ButArray);                numbut = 4;                numbut2 = 3;            }            if (numbut2 == 5) {                SP.add(ButCircles);                SP.add(ButQuadrangles);                SP.add(ButRemove);                fig_to_move = 0;                numbut2 = 4;            }            if (numbut2 == 6) {                SP.add(ButBack);                SP.add(ButDynamicArray);                SP.add(ButLinearList);                numbut2 = 1;            }            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Создать"        ButCreate.addActionListener(e -> {            if (numbut == 1) {                if (circle == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 300);                    ch3 = (int) (Math.random() * 200);                    circle = new TCircle(ch1, ch2, ch3, Color.BLACK);                    VISION1 = true;                    ((TCircle) circle).Show(VISION1);                    CP.add(circle, BorderLayout.CENTER);                    CP.revalidate();                } else {                    JOptionPane.showMessageDialog(f, "Окружность уже нарисована");                }                f.setFocusable(true);                f.requestFocus();            }            /*else if (numbut == 11) {                if (circles == null) {                    circles = new TCircle[10];                    VISION2 = true;                    for (int i=0; i<10; i++) {                        ch1 = (int) (Math.random() * 300);                        ch2 = (int) (Math.random() * 300);                        ch3 = (int) (Math.random() * 300);                        circles[i] = new TCircle (ch1, ch2, ch3, Color.GREEN);                        System.out.println("Circle №" + (i+1) + " координаты центра:: " + ch1 +", "+ ch2 +", диаметр:"+ ch3);                        circles[i].Show(VISION2);                        CP.add(circles[i], BorderLayout.CENTER);                        CP.validate();                        CP.repaint();                    }                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей уже создан");                }            }*/            else if (numbut == 2) {                if (ellipse == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 300);                    ch3 = (int) (Math.random() * 200);                    ch4 = (int) (Math.random() * 100);                    VISION2 = true;                    ellipse = new TEllipse(ch1, ch2, ch3, ch4, Color.BLACK);                    ((TCircle) ellipse).Show(VISION2);                    CP.add(ellipse, BorderLayout.CENTER);                    CP.revalidate();                } else {                    JOptionPane.showMessageDialog(f, "Эллипс уже нарисован");                }            }            else if (numbut == 3) {                if (quadrangle == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = (int) (Math.random() * 500);                    ch4 = (int) (Math.random() * 500);                    ch5 = (int) (Math.random() * 500);                    ch6 = (int) (Math.random() * 500);                    ch7 = (int) (Math.random() * 500);                    ch8 = (int) (Math.random() * 500);                    quadrangle = new TQuadrangle(ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8, Color.BLACK);                    VISION3 = true;                    ((TQuadrangle) quadrangle).Show(VISION3);                    CP.add(quadrangle, BorderLayout.CENTER);                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Четырехугольник уже нарисован");                }            }            else if (numbut == 4) {                if (rectangle == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    rectangle = new TRectangle(ch1, ch2, ch3, ch4, Color.BLACK);                    VISION4 = true;                    ((TRectangle) rectangle).Show(VISION4);                    CP.add(rectangle, BorderLayout.CENTER);                    CP.revalidate();                } else {                    JOptionPane.showMessageDialog(f, "Прямоугольник уже нарисован");                }            }            /*else if (numbut == 14) {                if (rectangles == null) {                    rectangles = new TRectangle[10];                    VISION3 = true;                    for (int i=0; i<10; i++) {                        ch1 = (int) (Math.random() * 300);                        ch2 = (int) (Math.random() * 300);                        ch3 = (int) (Math.random() * 300);                        ch4 = (int) (Math.random() * 300);                        rectangles[i] = new TRectangle (ch1, ch2, ch3, ch4, Color.RED);                        System.out.println("Rectangle №" + (i+1));                        rectangles[i].Show(VISION3);                        CP.add(rectangles[i], BorderLayout.CENTER);                        CP.validate();                        CP.repaint();                    }                    CP.revalidate();                }            }*/            else if (numbut == 5) {                if (romb == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    romb = new TRomb(ch1, ch2, ch3, ch4, Color.BLACK);                    VISION5 = true;                    ((TRomb) romb).Show(VISION5);                    CP.add(romb, BorderLayout.CENTER);                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб уже нарисован");                }            }            else if (numbut == 6) {                if (trapeze == null) {                    ch1 = (int) (Math.random() * 500);                    ch2 = (int) (Math.random() * 500);                    ch3 = 100 + (int) (Math.random() * 500);                    ch4 = 100 + (int) (Math.random() * 250);                    ch5 = 10 + (int) (Math.random() * 50);                    trapeze = new TTrapeze(ch1, ch2, ch3, ch4, ch5, Color.BLACK);                    VISION6 = true;                    ((TTrapeze) trapeze).Show(VISION6);                    CP.add(trapeze, BorderLayout.CENTER);                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция уже нарисована");                }            }            else if (numbut == 7) {                if (array == null) {                    array = new TFigure[30];                    for (i=0; i<30; i++) {                        // ch1 == 1 -> Окружность                        // ch1 == 2 -> Эллипс                        // ch1 == 3 -> Четырехугольник                        // ch1 == 4 -> Прямоугольник                        // ch1 == 5 -> Ромб                        // ch1 == 6 -> Трапециия                        ch1 = 1 + (int) (Math.random() * 6);                        if (ch1 == 1) {                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 300);                            ch3 = (int) (Math.random() * 200);                            array[i] = new TCircle(ch1, ch2, ch3, Color.BLACK);                        }                        else  if (ch1 == 2) {                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 300);                            ch3 = (int) (Math.random() * 200);                            ch4 = (int) (Math.random() * 100);                            array[i] = new TEllipse(ch1, ch2, ch3, ch4, Color.BLACK);                        }                        else  if (ch1 == 3) {                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = (int) (Math.random() * 500);                            ch4 = (int) (Math.random() * 500);                            ch5 = (int) (Math.random() * 500);                            ch6 = (int) (Math.random() * 500);                            ch7 = (int) (Math.random() * 500);                            ch8 = (int) (Math.random() * 500);                            array[i] = new TQuadrangle(ch1,ch2,ch3,ch4,ch5,ch6,ch7,ch8, Color.BLACK);                        }                        else  if (ch1 == 4) {                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            array[i] = new TRectangle(ch1, ch2, ch3, ch4, Color.BLACK);                        }                        else  if (ch1 == 5) {                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            array[i] = new TRomb(ch1, ch2, ch3, ch4, Color.BLACK);                        }                        else  if (ch1 == 6) {                            ch1 = (int) (Math.random() * 500);                            ch2 = (int) (Math.random() * 500);                            ch3 = 100 + (int) (Math.random() * 500);                            ch4 = 100 + (int) (Math.random() * 250);                            ch5 = 10 + (int) (Math.random() * 50);                            array[i] = new TTrapeze(ch1, ch2, ch3, ch4, ch5, Color.BLACK);                        }                    }                    JOptionPane.showMessageDialog(f, "Создан Массив из " + (i) + " фигур");                } else {                    JOptionPane.showMessageDialog(f, "Массив уже создан");                }                f.setFocusable(true);                f.requestFocus();            }            else if (numbut == 8) {                if (ArrayContainer == null) {                    ArrayContainer = new ContainerArray();                    ArrayContainer.Operation(1);                    ArrayCounter = ArrayContainer.GetCount();                    if (text != null) {                        CP.remove(text);                        text = null;                    }                    text = new JLabel("Создан Контейнер-Массив из " + ArrayCounter + " элементов");                    CP.add(text, BorderLayout.SOUTH);                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе массива уже создан");                }            }            else if (numbut == 9) {                if (ListContainer == null) {                    ListContainer = new ContainerList(); // создание пустого контейнера                    ListContainer.Operation(1);                    ListCounter = ListContainer.GetCount();                    if (text != null) {                        CP.remove(text);                        text = null;                    }                    text = new JLabel("Создан Контейнер-Список из " + ListCounter + " элементов");                    CP.add(text, BorderLayout.SOUTH);                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе списка уже создан");                }            }            ch1 = ch2 = ch3 = ch4 = ch5 = ch6 = ch7 = ch8 = 0;            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Переместить"        ButRemove.addActionListener(e -> {            ch1 = -30 + (int) (Math.random() * 100);            ch2 = -30 + (int) (Math.random() * 100);            if (numbut == 1) {                if (circle != null) {                    ((TCircle) circle).MoveTo(ch1, ch2);                    CP.add(circle, BorderLayout.CENTER);                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Окружность не найдена");                }            }            else if (numbut == 11) {                if (circles != null) {                    for (int i=0; i<10; i++) {                        circles[i].MoveTo(ch1, ch2);                        circles[i].Show(VISION2);                        CP.repaint();                    }                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Массив окружностей не найден");                }            }            else if (numbut == 2) {                if (ellipse  != null) {                    ((TEllipse) ellipse ).MoveTo(ch1, ch2);                    CP.add(ellipse , BorderLayout.CENTER);                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Эллипс не найден");                }            }            else if (numbut == 3) {                if (quadrangle != null) {                    ((TQuadrangle) quadrangle).MoveTo(ch1,ch2);                    CP.add(quadrangle, BorderLayout.CENTER);                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Четырехугольник не найден");                }            }            else if (numbut == 4) {                if (rectangle != null) {                    ((TRectangle) rectangle).MoveTo(ch1, ch2);                    CP.add(rectangle, BorderLayout.CENTER);                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Прямоугольник не найден");                }            }            else if (numbut == 14) {                if (rectangles != null) {                    for (int i=0; i<10; i++) {                        rectangles[i].MoveTo(ch1, ch2);                        rectangles[i].Show(VISION3);                        CP.repaint();                    }                    CP.revalidate();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Прямоугольников не найден");                }            }            else if (numbut == 5) {                if (romb != null) {                    ((TRomb) romb).MoveTo(ch1,ch2);                    CP.add(romb, BorderLayout.CENTER);                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб не найден");                }            }            else if (numbut == 6) {                if (trapeze != null) {                    ((TTrapeze) trapeze).MoveTo(ch1,ch2);                    CP.add(trapeze, BorderLayout.CENTER);                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция не найдена");                }            }            else if (numbut == 7) {                MoveMassive(ch1, ch2);            }            else if (numbut == 8) {                if (ArrayContainer != null) {                    ArrayContainer.Operation(2);                    i = ArrayContainer.GetIMass();                    for (int j = 0; j < i; j++) {                        CP.add(ArrayContainer.getFigureFromContMass(j), BorderLayout.CENTER);                        CP.validate();                    }                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f,"Фигуры не найдены");                }            }            else if (numbut == 9) {                if (ListContainer != null) {                    ListContainer.Operation(2);                    indexList = ListContainer.GetIList();                    for (int j = 0; j < indexList; j++) {                        CP.add(ListContainer.getFigureFromContList(j), BorderLayout.CENTER);                        CP.validate();                    }                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f,"Фигуры не найдены");                }            }            ch1 = ch2 = 0;            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Удалить"        ButDelete.addActionListener(e -> {            if (numbut == 1) {                if (circle != null) {                    CP.remove(circle);                    ((TCircle) circle).Show(false);                    circle = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Окружность не найдена");                }            }            else if (numbut == 11) {                if (circles != null) {                    for (int i=0; i<10; i++) {                        CP.remove(circles[i]);                        circles[i].Show(false);                    }                    circles = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей не найден");                }            }            else if (numbut == 2) {                if (ellipse  != null) {                    CP.remove(ellipse);                    ((TEllipse) ellipse ).Show(false);                    ellipse  = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Эллипс не найден");                }            }            else if (numbut == 3) {                if (quadrangle != null) {                    CP.remove(quadrangle);                    ((TQuadrangle) quadrangle).Show(false);                    quadrangle = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Четырехугольник не найден");                }            }            else if (numbut == 4) {                if (rectangle != null) {                    CP.remove(rectangle);                    ((TRectangle) rectangle).Show(false);                    rectangle = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Прямоугольник не найден");                }            }            else if (numbut == 14) {                if (rectangles != null) {                    for (int i=0; i<10; i++) {                        CP.remove(rectangles[i]);                        rectangles[i].Show(false);                    }                    rectangles = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Массив Прямоугольников не найден");                }            }            else if (numbut == 5) {                if (romb != null) {                    CP.remove(romb);                    ((TRomb) romb).Show(false);                    romb = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб не найден");                }            }            else if (numbut == 6) {                if (trapeze != null) {                    CP.remove(trapeze);                    ((TTrapeze) trapeze).Show(false);                    trapeze = null;                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция не найдена");                }            }            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Изменить радиус"        ButChangeRadius.addActionListener(e -> {            ch1 = 50 + (int) (Math.random() * 150);            //для одиночной окружности            if (numbut == 1) {                if (circle != null) {                    ((TCircle) circle).chRad(ch1);                    ((TCircle) circle).Show(VISION1);                    CP.add(circle, BorderLayout.CENTER);                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Окружность не найдена");                }            }            /*//для массива окружностей            else if (numbut == 11) {                if (circles != null) {                    for (int i = 0; i < 10; i++) {                        ch1 = 50 + (int) (Math.random() * 150);                        circles[i].chRad(ch1);                        circles[i].Show(VISION2);                    }                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей не создан");                }            }*/            //для окружностей из массива            else if (numbut == 7) {                if (array != null) {                    for (int j = 0; j < 30; j++) {                        if (array[j] instanceof TCircle) {                            ((TCircle) array[j]).chRad(ch1);                        }                    }                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            ch1 = 0;            f.setFocusable(true);            f.requestFocus();        });        //кнопка ""Повернуть на 90""        ButTurn90.addActionListener(e -> {            if (ellipse  != null) {                ((TEllipse) ellipse ).Turn();                ((TEllipse) ellipse ).Show(VISION2);                CP.add(ellipse , BorderLayout.CENTER);                CP.revalidate();                CP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Эллипс не найден");            }            f.setFocusable(true);            f.requestFocus();        });        //кнопка "Изменить размер"        ButChangeSize.addActionListener(e -> {            ch1 = -25 + (int) (Math.random() * 50);            ch2 = -25 + (int) (Math.random() * 50);            //для одиночного четырехугольника            if (numbut == 3) {                if (quadrangle != null) {                    ((TQuadrangle) quadrangle).chSize(ch1, ch2);                    ((TQuadrangle) quadrangle).Show(VISION3);                    CP.add(quadrangle, BorderLayout.CENTER);                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Четырехугольник не найден");                }            }            //для одиночного прямоугольника            if (numbut == 4) {                if (rectangle != null) {                    ((TRectangle) rectangle).chSize(ch1, ch2);                    ((TRectangle) rectangle).Show(VISION4);                    CP.add(rectangle, BorderLayout.CENTER);                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Прямоугольник не найден");                }            }            /*//для массива прямоугольников            else if (numbut == 14) {                if (rectangles != null) {                    for (int i = 0; i < 10; i++) {                        rectangles[i].chSize(ch1, ch2);                        rectangles[i].Show(VISION3);                    }                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив Окружностей не создан");                }            }*/            //для одиночного ромба            else if (numbut == 5) {                if (romb != null) {                    ((TRomb) romb).chSize(ch1, ch2);                    ((TRomb) romb).Show(VISION5);                    CP.add(romb, BorderLayout.CENTER);                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Ромб не найден");                }            }            //для одиночной трапеции            else if (numbut == 6) {                if (trapeze != null) {                    ((TTrapeze) trapeze).chSize(ch1, ch2);                    ((TTrapeze) trapeze).Show(VISION6);                    CP.add(trapeze, BorderLayout.CENTER);                    CP.revalidate();                    CP.repaint();                }                else {                    JOptionPane.showMessageDialog(f, "Трапеция не найдена");                }            }            //для четырехугольников из массива            else if (numbut == 7) {                if (array != null) {                    for (int j = 0; j < 30; j++) {                        if (array[j] instanceof TQuadrangle) {                            ((TQuadrangle) array[j]).chSize(ch1, ch2);                        }                    }                    CP.revalidate();                    CP.repaint();                } else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }                f.setFocusable(true);                f.requestFocus();            }            ch1 = ch2 = 0;            f.setFocusable(true);            f.requestFocus();        });        //"Массив"        ButArray.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            /*if (numbut == 1) {                SP.add(ButRemove); SP.add(ButDelete); SP.add(ButChangeRadius); numbut = 11; numbut2 = 21;                JOptionPane.showMessageDialog(f, "Следующие действия будут выполнены для массива окружностей");            }            else if (numbut == 4) {                SP.add(ButRemove); SP.add(ButDelete); SP.add(ButChangeSize); numbut = 14; numbut2 = 24;                JOptionPane.showMessageDialog(f, "Следующие действия будут выполнены для массива прямоугольников");            }*/            SP.add(ButShow);            SP.add(ButRemove);            SP.add(ButClear);            SP.add(ButTerminate);            SP.add(ButSubclasses);            numbut = 7;            numbut2 = 1;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //"Показать"        ButShow.addActionListener(e -> {            if (numbut == 7)            {                if (array != null) {                    for (int i=0; i<30; i++) {                        ( array[i]).Show(true);                        CP.add(array[i], BorderLayout.CENTER);                        CP.validate();                        CP.revalidate();                        CP.repaint();                    }                    JOptionPane.showMessageDialog(f,"Все фигуры показаны");                }                else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }            }            else if (numbut == 8) {                if (ArrayContainer != null) {                    ArrayContainer.Operation(3);                    ArrayCounter = ArrayContainer.GetCount();                    for (i=0; i<ArrayCounter; i++) {                        CP.add(ArrayContainer.getFigureFromContMass(i), BorderLayout.CENTER);                        if (text != null) { CP.remove(text); text = null; }                        text = new JLabel("Показано " + (i+1) + "/" + ArrayCounter + " фигур из контейнера-массива");                        CP.add(text, BorderLayout.SOUTH);                        CP.validate();                        CP.revalidate();                        CP.repaint();                    }                    ArrayContainer.SetIMass(i);                } else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе массива не создан");                }            }            else if (numbut == 9) {                if (ListContainer != null) {                    ListContainer.Operation(3);                    ListCounter= ListContainer.GetCount();                    for (indexList=0; indexList<ListCounter; indexList++) {                        CP.add(ListContainer.getFigureFromContList(indexList), BorderLayout.CENTER);                        if (text != null) { CP.remove(text); text = null; }                        text = new JLabel("Показано " + (indexList+1) + "/" + ListCounter + " фигур контейнера-списка");                        CP.add(text, BorderLayout.SOUTH);                        CP.validate();                        CP.revalidate();                        CP.repaint();                    }                    ListContainer.SetIList(indexList);                }  else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе списка не создан");                }            }            f.setFocusable(true);            f.requestFocus();        });        //"Стереть"        ButClear.addActionListener(e -> {            if (numbut == 7) {                if (array != null) {                    for (int i=0; i<30; i++) {                        (array[i]).Show(false);                    }                    CP.revalidate();                    CP.repaint();                    JOptionPane.showMessageDialog(f, "Фигуры стерты, но объекты не уничтожены");                }                else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }            }                                    else if (numbut == 8) {                if (ArrayContainer != null) {                    ArrayContainer.Operation(4);                    ArrayCounter = ArrayContainer.GetCount();                    if (text != null) {                        for (i = 0; i < ArrayCounter; i++) {                            ArrayContainer.getFigureFromContMass(i).Show(false);                        }                        CP.remove(text);                        text = null;                        text = new JLabel("Все фигуры из контейнера-массива стерты");                        CP.add(text, BorderLayout.SOUTH);                        CP.revalidate();                        CP.repaint();                    }                    ArrayContainer.SetIMass(0);                    JOptionPane.showMessageDialog(f,"Фигуры контейнера-массива стерты, но объекты не уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер-Массив не создан");                }            }            else if (numbut == 9) {                if (ListContainer != null) {                    ListContainer.Operation(4);                    ListCounter = ListContainer.GetCount();                    if (text != null) {                        for (indexList = 0; indexList < ListCounter; indexList++) {                            ListContainer.getFigureFromContList(indexList).Show(false);                        }                        CP.remove(text);                        text = null;                        text = new JLabel("Все фигуры из контейнера-списка стерты");                        CP.add(text, BorderLayout.SOUTH);                        CP.revalidate();                        CP.repaint();                    }                    ListContainer.SetIList(0);                    JOptionPane.showMessageDialog(f,"Фигуры контейнера-списка стерты, но объекты не уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер-Список не создан");                }            }            f.setFocusable(true);            f.requestFocus();        });        //"Уничтожить"        ButTerminate.addActionListener(e -> {            if (numbut == 7) {                if (array != null) {                    for (int i = 0; i < 30; i++) {                        ( array[i]).Show(false);                        CP.remove(array[i]);                    }                    CP.revalidate();                    CP.repaint();                    array = null;                    JOptionPane.showMessageDialog(f, "Фигуры стерты, а соответствующие объекты уничтожены");                }                else {                    JOptionPane.showMessageDialog(f, "Массив не создан");                }            }                       else if (numbut == 8) {                if (ArrayContainer != null) {                    if (text != null) {                        for (i = 0; i < ArrayCounter; i++) {                            CP.remove(ArrayContainer.getFigureFromContMass(i));                        }                        ArrayContainer.Operation(5);                        ArrayCounter = ArrayContainer.GetCount();                        CP.remove(text);                        CP.revalidate();                        CP.repaint();                        text = null;                    }                    ArrayCounter = ArrayContainer.GetCount();                    i = ArrayContainer.GetIMass();                    ArrayContainer = null;                    JOptionPane.showMessageDialog(f, "Фигуры контейнера-массива стерты, а соответствующие объекты уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе массива не создан");                }            }            else if (numbut == 9) {                if (ListContainer != null) {                    if (text != null) {                        for (indexList = 0; indexList < ListCounter; indexList++) {                            CP.remove(ListContainer.getFigureFromContList(indexList));                        }                        ListContainer.Operation(5);                        ListCounter = ListContainer.GetCount();                        CP.remove(text);                        CP.revalidate();                        CP.repaint();                        text = null;                        ListContainer.SetIList(0);                    }                    ListContainer = null;                    ListCounter = 0;                    JOptionPane.showMessageDialog(f, "Фигуры контейнера-списка стерты, а соответствующие объекты уничтожены");                } else {                    JOptionPane.showMessageDialog(f, "Контейнер на базе списка не создан");                }            }            f.setFocusable(true);            f.requestFocus();        });        //"Подиерархии"        ButSubclasses.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCircles);            SP.add(ButQuadrangles);            numbut2 = 4;            SP.revalidate();            SP.repaint();            f.setFocusable(true);            f.requestFocus();        });        //Контейнер        ButContainer.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButDynamicArray);            SP.add(ButLinearList);            numbut2 = 1;            SP.revalidate();            SP.repaint();        });        //На базе динамического массива        ButLinearList.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButShow);            SP.add(ButAdd);            SP.add(ButRemove);            SP.add(ButClear);            SP.add(ButTerminate);            numbut = 8;            numbut2 = 6;            SP.revalidate();            SP.repaint();        });        //На базе линейного динамического списка        ButDynamicArray.addActionListener(e -> {            SP.removeAll();            SP.add(ButBack);            SP.add(ButCreate);            SP.add(ButShow);            SP.add(ButAdd);            SP.add(ButRemove);            SP.add(ButClear);            SP.add(ButTerminate);            numbut = 9;            numbut2 = 6;            SP.revalidate();            SP.repaint();        });        //Добавить        ButAdd.addActionListener(e -> {            if (numbut == 8) {                if (ArrayContainer == null) { ArrayContainer = new ContainerArray(); }                ArrayContainer.Operation(6);                ArrayCounter = ArrayContainer.GetCount();                i = ArrayContainer.GetIMass();                if (text != null) {                    CP.remove(text);                    text = null;                }                text = new JLabel("Показано " + (i) + "/" + ArrayCounter + " фигур из контейнера-массива");                CP.add(text, BorderLayout.SOUTH);                CP.revalidate();                CP.repaint();            }            else if (numbut == 9) {                if (ListContainer == null) { ListContainer = new ContainerList(); }                ListContainer.Operation(6);                ListCounter = ListContainer.GetCount();                indexList = ListContainer.GetIList();                if (text != null) {                    CP.remove(text);                    text = null;                }                text = new JLabel("Показано " + (indexList) + "/" + ListCounter + " фигур из контейнера-списка");                CP.add(text, BorderLayout.SOUTH);                CP.revalidate();                CP.repaint();            }        });        return p;    }    private void MoveMassive (int dx, int dy) {        //перемещение всех        if (fig_to_move == 0) {            if (array != null) {                for (int j = 0; j < 30; j++) {                    (array[j]).MoveTo(dx, dy);                }                CP.revalidate();                CP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Массив не создан");            }        }        //перемещение окружностей        else  if (fig_to_move == 1) {            if (array != null) {                for (int j = 0; j < 30; j++) {                    if (array[j] instanceof TCircle) {                        ( array[j]).MoveTo(dx, dy);                    }                }                CP.revalidate();                CP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Массив не создан");            }        }        //перемещение четырехугольников        else  if (fig_to_move == 2) {            if (array != null) {                for (int j = 0; j < 30; j++) {                    if (array[j] instanceof TQuadrangle) {                        (array[j]).MoveTo(dx, dy);                    }                }                CP.revalidate();                CP.repaint();            } else {                JOptionPane.showMessageDialog(f, "Массив не создан");            }        }        else {            JOptionPane.showMessageDialog(f, "Фигуры не найдены");        }        f.setFocusable(true);        f.requestFocus();    }    public static void main (String[] argc) {        SwingUtilities.invokeLater(Canvas::new);    }}